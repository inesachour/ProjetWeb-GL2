<?php

namespace App\Controller;

use App\Entity\Compte;
use App\Entity\Endroit;
use App\Entity\Evenement;
use App\Entity\Indoor;
use App\Form\ModifyAccountType;
use ContainerBi1bDen\getEndroitRepositoryService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Security;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use App\Form\ModifyEventType;
use App\Form\ModifyIndoorType;
use App\Form\ModifyPlaceType;

/**
 * @Route("/account")
 */
class AccountController extends AbstractController
{
    private $security;

    public function __construct(Security $security)
    {
        $this->security = $security;
    }



    /**
     * @Route("/",name="account")
     */
    public function index(): Response
    {if ($this->security->isGranted('ROLE_USER')) {
        $user = $this->security->getUser();
        $repository = $this->getDoctrine()->getRepository(Compte::class);
        $row = $repository->findOneByAdresseMail($user->getAdresseMail());

        return $this->render('account/index.html.twig', ['row'=>$row
        ]);
    }
    else{
        return $this->redirectToRoute('app_login');
    }

    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route("/modifyaccount",name="modifyaccount")
     */
    public function modifyaccount(EntityManagerInterface $manager,Request $request)
    {
        $user = $this->security->getUser();
        $repository = $this->getDoctrine()->getRepository(Compte::class);
        $acc = $repository->findOneByAdresseMail($user->getAdresseMail());

        $form = $this->createForm(ModifyAccountType::class,$acc);
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            if($this->valid($form,$acc))
            {
                $manager->persist($acc);
                $manager->flush();
                $this->addFlash('success','Account information updated with success !');
                return ($this->redirectToRoute('account'));
            }
        }
        return($this->render('account/modifyAccount.html.twig' ,['row'=>$acc ,
            'form' => $form->createView()]));
    }

    public function isCsrfTokenValid(string $id, ?string $token): bool
    {
        return parent::isCsrfTokenValid($id, $token); // TODO: Change the autogenerated stub
    }

    public function valid($form,$acc)
    {
        $compte = $this->getDoctrine()->getRepository(Compte::class);
        $result = $compte->findByUsername($form->get("username")->getData());
        if(($result != []) && ($form->get("username")->getData() != $acc->getUsername() ))
        {
            $this->addFlash('fail','Essayer de Saisir un nouveau username ,cela dÃ©ja existe !');
            return false;
        }
        return true;
    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route ("/deleteaccount",name="deleteaccount")
     */
    public function deleteaccount(EntityManagerInterface $manager)
    {
        $user = $this->getUser();
        $repository = $this->getDoctrine()->getRepository(Compte::class);
        $acc = $repository->findOneByAdresseMail($user->getAdresseMail());
        $name = $acc->getName();
        $manager->remove($acc);
        $manager->flush();
        return $this->redirectToRoute('home',['goodbye'=>"Goodbye ".$name."! The JAW won't be the same without you :( !"]);

    }

    /**
     *  @IsGranted("ROLE_USER")
     * @Route ("/deleteAccountConfirm",name="deleteAccountConfirm")
     */

    public function deleteAccountConfirm()
    {
        return ($this->render('account/deleteAccountConfirm.html.twig'));
    }





    /**
     * @IsGranted("ROLE_USER")
     * @Route("/activities/events/{page?1}",name="account.activities.event")
     */
    public function showEvents($page): Response
    {

        $repository = $this->getDoctrine()->getRepository(Evenement::class);
        $user = $this->getUser();

        $activities = $repository->findByUser($user->getAdresseMail());
        if (count($activities)){
            $offset = 12;
            $maxpage = count( $activities)/$offset;
            $activities2= null;
            $j=1;
            for($i=($page-1)*$offset;$i<($page-1)*$offset+$offset;$i++)
            {
                if(isset($activities[$i])) {
                    $activities2[$j] = $activities[$i];
                    $j++;
                }
            }
            return $this->render('account/showEvents.html.twig', [
                'activities'=> $activities2,
                'page'=>$page,
                'maxpage'=> $maxpage,

            ]);
        }else{
            $this->addFlash('error', "You haven't shared any events yet , but late is better than never");
            return $this->redirectToRoute('account.activities.choice');
        }

    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route("/activities/places/{page?1}",name="account.activities.places")
     */
    public function showPlaces($page): Response
    {

        $repository = $this->getDoctrine()->getRepository(Endroit::class);
        $user = $this->getUser();

        $activities = $repository->findByUser($user->getAdresseMail());
        if (count($activities)){

            $offset = 12;
            $maxpage = count( $activities)/$offset;
            $activities2= null;
            $j=1;
            for($i=($page-1)*$offset;$i<($page-1)*$offset+$offset;$i++)
            {
                if(isset($activities[$i])) {
                    $activities2[$j] = $activities[$i];
                    $j++;
                }
            }
            return $this->render('account/showPlaces.html.twig', [
                'activities'=> $activities2,
                'page'=>$page,
                'maxpage'=> $maxpage,

            ]);
        }else{
            $this->addFlash('error', "You haven't shared any places yet , but late is better than never");
            return $this->redirectToRoute('account.activities.choice');
        }

    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route("/activities/indoor/{page?1}",name="account.activities.indoor")
     */
    public function showIndoor($page): Response
    {

        $repository = $this->getDoctrine()->getRepository(Indoor::class);
        $user = $this->getUser();

        $activities = $repository->findByUser($user->getAdresseMail());
        if (count($activities)){
            $offset = 12;
            $maxpage = count( $activities)/$offset;
            $activities2= null;
            $j=1;
            for($i=($page-1)*$offset;$i<($page-1)*$offset+$offset;$i++)
            {
                if(isset($activities[$i])) {
                    $activities2[$j] = $activities[$i];
                    $j++;
                }
            }
            return $this->render('account/showIndoor.html.twig', [
                'activities'=> $activities2,
                'page'=>$page,
                'maxpage'=> $maxpage,

            ]);
        }else{
            $this->addFlash('error', "You haven't shared any Indoor activities yet , but late is better than never");
            return $this->redirectToRoute('account.activities.choice');
        }
    }



    /**
     * @IsGranted("ROLE_USER")
     * @Route("/activities",name="account.activities.choice")
     */
    public function chooseActivities(): Response
    {
        return $this->render('account/chooseActivities.html.twig');

    }


    /**
     * @IsGranted("ROLE_USER")
     * @Route("/activities/delete/{type}/{id}",name="account.activities.delete")
     */
    public function deleteActivity($type ,$id ,EntityManagerInterface $manager): Response
    {
        //Getting object by id
        if ($type == 1) {
            $activity = $this->getDoctrine()->getRepository(Evenement::class)->findOneById($id);
            $route ='account.activities.event';
        }else if ($type == 2){
            $activity = $this->getDoctrine()->getRepository(Endroit::class)->findOneById($id);
            $route ='account.activities.place';
        } else {
            $activity = $this->getDoctrine()->getRepository(Indoor::class)->findOneById($id);
            $route ='account.activities.indoor';
        }

        if ($activity) {
            $Name =$activity->getName();
            $manager->remove($activity);
            $manager->flush();
            $this->addFlash('success', " Plan $Name was succesfully deleted");
        } else {
            $this->addFlash('error', "Plan doesn't exist");
        }

        return $this->redirectToRoute($route);


    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route("/event/modify/event/{id}",name="account.event.modify")
     */
    public function modifyEvent($id, EntityManagerInterface $manager, Request $request): Response
    {
        $event = $this->getDoctrine()->getRepository(Evenement::class)->findOneBy(['user' => $this->getUser()->getAdresseMail(), 'id' => $id]);
        $form = $this->createForm(ModifyEventType::class, $event);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            $manager->persist($event);
            $manager->flush();
            $this->addFlash('success', 'Mabrook Event information updated  !');
            $this->redirectToRoute('account.activities.event');

        }
        return $this->render('account/modifyEvent.html.twig', [
            'event' => $event,
            'form' => $form->createView()
        ]);

    }

    /**
     * @IsGranted("ROLE_USER")
     * @Route("/event/modify/place/{id}",name="account.place.modify")
     */
    public function modifyPlace($id, EntityManagerInterface $manager, Request $request): Response
    {
        $place = $this->getDoctrine()->getRepository(Endroit::class)->findOneBy(['user' => $this->getUser()->getAdresseMail(), 'id' => $id]);
        $form = $this->createForm(ModifyPlaceType::class, $place);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            $manager->persist($place);
            $manager->flush();
            $this->addFlash('success', 'Mabrook Place information updated  !');
            return $this->redirectToRoute('account.activities.places');
        }
        return $this->render('account/modifyPlace.html.twig', [
            'place' => $place,
            'form' => $form->createView()
        ]);

    }
    /**
     * @IsGranted("ROLE_USER")
     * @Route("/event/modify/indoor/{id}",name="account.indoor.modify")
     */
    public function modifyIndoor($id, EntityManagerInterface $manager, Request $request): Response
    {
        $indoor = $this->getDoctrine()->getRepository(Indoor::class)->findOneBy(['user' => $this->getUser()->getAdresseMail(), 'id' => $id]);
        $form = $this->createForm(ModifyIndoorType::class, $indoor);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            $manager->persist($indoor);
            $manager->flush();
            $this->addFlash('success', 'Mabrook Indoor activity information updated  !');
            return $this->redirectToRoute('account.activities.indoor');
        }
        return $this->render('account/modifyIndoor.html.twig', [
            'indoor' => $indoor,
            'form' => $form->createView()
        ]);

    }
}
